@using static Constants
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer

@{
    ViewData["Title"] = localizer["Mrop"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
#chartdiv {
    width: 100%;
    height: 80vh;
    min-height: 500px;
    padding: 0;
}

</style>

    <div class="secretbannerdiv">
        @localizer["SecretFiveEyesOnly"]
    </div>
    <br /> <br />

<h5>@localizer["MROP"]</h5>

<p>
    <div class="row justify-content-between">
        <div class="col-auto mr-auto">
             <label for="CreateOutputTask">@localizer["CreateOutputTask"]</label><br />
            <a asp-action="CreateOutputTask">
                <img src='@Url.Content("~/images/Add.png")' height="40" width="40" title="@localizer["CreateOutputTask"]" />
            </a>
        </div>
        <div class="col-auto">
            <label for="AssignFelm">@localizer["AssignForceElement"]</label><br />
            <a asp-action="AssignFelm">
                <img src='@Url.Content("~/images/Add.png")' height="40" width="40" title="@localizer["AssignForceElement"]" />
            </a>
        </div>
    </div>
</p>

<div id="chartdiv"></div>

@section Scripts {
    <script src="~/js/amCharts/core.js"></script>
    <script src="~/js/amCharts/charts.js"></script>
    <script src="~/js/amCharts/themes/animated.js"></script>

    <script>
        // Parse data from ViewBag
        var json = '@ViewBag.gantData'.replaceAll("&quot;", '"');
        var data = JSON.parse(json);

        var categoryJson = '@ViewBag.gantCategories'.replaceAll("&quot;", '"');
        var categories = JSON.parse(categoryJson);

        // Determine chart min/max dates for zooming
        let minDate = null, maxDate = null;
        data.forEach(entry => {
            if (!minDate || entry.start < minDate) minDate = entry.start;
            if (!maxDate || entry.end > maxDate) maxDate = entry.end;
        });

        // Calculate zoom start point (~2 weeks ago)
        let startpoint = 0;
        if (minDate && maxDate) {
            const daysTotal = Math.floor((Date.parse(maxDate) - Date.parse(minDate)) / 86400000);
            const towWeeksAgo = new Date();
            towWeeksAgo.setDate(towWeeksAgo.getDate() - 14);
            const daysCurrent = Math.floor((towWeeksAgo - Date.parse(minDate)) / 86400000);
            startpoint = daysCurrent / daysTotal;
            if (startpoint > 1) startpoint = 0;
        }

        // Group items by TaskOutput (category) and resolve overlaps with track index
        let expandedData = [];
        let expandedCategories = [];

        categories.forEach(category => {
            let groupItems = data.filter(d => d.category === category.category);
            let tracks = [];

            groupItems.forEach(item => {
                let placed = false;
                for (let i = 0; i < tracks.length; i++) {
                    if (new Date(tracks[i][tracks[i].length - 1].end) <= new Date(item.start)) {
                        tracks[i].push(item);
                        item.track = i;
                        placed = true;
                        break;
                    }
                }
                if (!placed) {
                    item.track = tracks.length;
                    tracks.push([item]);
                }
            });

            // Create virtual rows per track
            tracks.forEach((track, idx) => {
                let catLabel = idx === 0 ? category.category : "";
                let virtualCat = `${category.category}_track${idx}`;
                expandedCategories.push({ category: virtualCat, label: catLabel, otId: category.otId });
                track.forEach(item => {
                    item.category = virtualCat;
                    expandedData.push(item);
                });
            });
        });

        am4core.ready(function () {
            am4core.useTheme(am4themes_animated);
            am4core.addLicense('@Constants.licensekey');

            var chart = am4core.create("chartdiv", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0;
            chart.paddingRight = 30;
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.lineY.disabled = false;
            chart.cursor.behavior = "zoomX";
            chart.mouseWheelBehavior = "zoomX";
            chart.chartContainer.wheelable = true;

            chart.data = expandedData;

            // Y Axis (Category)
            var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "category";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.inversed = true;
            categoryAxis.renderer.minGridDistance = 5;
            categoryAxis.renderer.cellHeight = 25;

            // Customize label visibility: only show if label is non-empty
            categoryAxis.renderer.labels.template.adapter.add("text", function(text, target) {
                let catData = expandedCategories.find(c => c.category === target.dataItem?.category);
                return catData?.label || "";
            });

            // Navigate to TaskOutput on click (if applicable)
            categoryAxis.renderer.labels.template.events.on("hit", function (ev) {
                let labelCat = ev.target.dataItem.category;
                let item = expandedCategories.find(c => c.category === labelCat);
                if (item?.otId) {
                    window.location.href = `/Mrop/EditOutputTask/${item.otId}`;
                }
            });

            categoryAxis.data = expandedCategories;

            // X Axis (Time)
            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.baseInterval = { count: 1, timeUnit: "day" };
            dateAxis.strictMinMax = true;
            dateAxis.renderer.tooltipLocation = 0;
            dateAxis.renderer.minZoomCount = 25;
            dateAxis.mouseWheelZoomEnabled = true;
            dateAxis.mouseWheelScrollEnabled = true;

            // Series (Bars)
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.columns.template.height = am4core.percent(25);
            series.clustered = false;
            series.dataFields.openDateX = "start";
            series.dataFields.dateX = "end";
            series.dataFields.categoryY = "category";
            series.columns.template.propertyFields.fill = "color";
            series.columns.template.tooltipHTML = `
                <div style="font-size:14px; max-width: 300px;">
                    <strong>{felm}</strong><br/>
                    From: <em>{openDateX}</em><br/>
                    To: <em>{dateX}</em><br/>
                    <a href='/Mrop/EditAssignedFelm/{id}' target='_blank'>Edit</a>
                </div>`;
            series.tooltip.pointerOrientation = "down";
            series.tooltip.label.interactionsEnabled = true;
            series.tooltip.keepTargetHover = true;

            // Ensure tooltips don't get clipped
            chart.tooltipContainer.layout = "absolute";
            chart.tooltipContainer.zIndex = 1000;

            // Label on bars
            var labelBullet = series.bullets.push(new am4charts.LabelBullet());
            labelBullet.label.text = "{felm}";
            labelBullet.label.fontSize = 13;
            labelBullet.label.fontWeight = "bold";
            labelBullet.label.truncate = true;
            labelBullet.label.horizontalCenter = "middle";
            labelBullet.label.isMeasured = true;

            // Navigate on bar click
            series.columns.template.events.on("click", function (ev) {
                const context = ev.target.dataItem.dataContext;
                if (context.otId) {
                    window.location.href = `/Mrop/EditOutputTask/${context.otId}`;
                }
            });

            // Scrollbar
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.start = startpoint;

            // Today marker
            var todayRange = dateAxis.axisRanges.create();
            todayRange.date = new Date();
            todayRange.grid.stroke = am4core.color("grey");
            todayRange.grid.strokeWidth = 2;
            todayRange.label.text = "Today";
            todayRange.label.fill = am4core.color("grey");
            todayRange.label.verticalCenter = "bottom";
        });
    </script>
}
