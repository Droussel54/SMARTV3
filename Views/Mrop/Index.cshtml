@using static Constants
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer

@{
    ViewData["Title"] = localizer["Mrop"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
#chartdiv {
    width: 100%;
    height: 90vh;
    min-height: 600px;
    padding: 0;
}

.ampopup-title {
    font-weight: bold;
    font-size: 120%;
    border-bottom: 2px solid rgba(0, 0, 0, 1);
}

.ampopup-content {
    background-color: rgba(255, 255, 255, 0.8);
    overflow: auto;
    border: 2px solid rgba(0, 0, 0, 1);
}

.ampopup-close {
    top: 0.7em;
    right: 0.7em;
    width: 1.5em;
    height: 1.5em;
}
</style>

    <div class="secretbannerdiv">
        @localizer["SecretFiveEyesOnly"]
    </div>
    <br /> <br />

<h5>@localizer["MROP"]</h5>

<p>
    <div class="row justify-content-between">
        <div class="col-auto mr-auto">
             <label for="CreateOutputTask">@localizer["CreateOutputTask"]</label><br />
            <a asp-action="CreateOutputTask">
                <img src='@Url.Content("~/images/Add.png")' height="40" width="40" title="@localizer["CreateOutputTask"]" />
            </a>
        </div>
        <div class="col-auto">
            <label for="AssignFelm">@localizer["AssignForceElement"]</label><br />
            <a asp-action="AssignFelm">
                <img src='@Url.Content("~/images/Add.png")' height="40" width="40" title="@localizer["AssignForceElement"]" />
            </a>
        </div>
    </div>
</p>

<div id="chartdiv"></div>

@section Scripts {
    <script src="~/js/amCharts/core.js"></script>
    <script src="~/js/amCharts/charts.js"></script>
    <script src="~/js/amCharts/themes/animated.js"></script>

    <script>
        // Parse data from ViewBag
        var json = '@ViewBag.gantData'.replaceAll("&quot;", '"');
        var data = JSON.parse(json);

        var categoryJson = '@ViewBag.gantCategories'.replaceAll("&quot;", '"');
        var categories = JSON.parse(categoryJson);

        // Determine chart min/max dates for zooming
        let minDate = null, maxDate = null;
        data.forEach(entry => {
            if (!minDate || entry.start < minDate) minDate = entry.start;
            if (!maxDate || entry.end > maxDate) maxDate = entry.end;
        });

        // Calculate zoom start point (~2 weeks ago)
        let startpoint = 0;
        if (minDate && maxDate) {
            const daysTotal = Math.floor((Date.parse(maxDate) - Date.parse(minDate)) / 86400000);
            const towWeeksAgo = new Date();
            towWeeksAgo.setDate(towWeeksAgo.getDate() - 14);
            const daysCurrent = Math.floor((towWeeksAgo - Date.parse(minDate)) / 86400000);
            startpoint = daysCurrent / daysTotal;
            if (startpoint > 1) startpoint = 0;
        }

        // Assign track (vertical position) for overlapping ForceElements
        function assignOverlapTracks(data) {
            const trackMap = {};

            data.forEach(item => {
                const category = item.category;
                const start = new Date(item.start).getTime();
                const end = new Date(item.end).getTime();

                if (!trackMap[category]) trackMap[category] = [];

                let placed = false;

                for (let i = 0; i < trackMap[category].length; i++) {
                    const track = trackMap[category][i];
                    const lastInTrack = track[track.length - 1];
                    if (new Date(lastInTrack.end).getTime() <= start) {
                        track.push(item);
                        item.track = i;
                        placed = true;
                        break;
                    }
                }

                if (!placed) {
                    item.track = trackMap[category].length;
                    trackMap[category].push([item]);
                }
            });

            return data;
        }

        data = assignOverlapTracks(data);

        am4core.ready(function () {
            am4core.useTheme(am4themes_animated);
            am4core.addLicense('@Constants.licensekey');

            var chart = am4core.create("chartdiv", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0;
            chart.paddingRight = 30;
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.lineY.disabled = false;
            chart.cursor.behavior = "zoomX";
            chart.mouseWheelBehavior = "zoomX";
            chart.chartContainer.wheelable = true;

            chart.data = data;

            // Y Axis (Category)
            var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "category";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.inversed = true;
            categoryAxis.renderer.minGridDistance = 5;
            categoryAxis.renderer.cellHeight = 80; // Increase height for stacked bars
            categoryAxis.renderer.labels.template.fill = am4core.color("#007bff"); // Bootstrap blue
            categoryAxis.renderer.labels.template.fontWeight = "bold";
            categoryAxis.renderer.labels.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;
            categoryAxis.renderer.labels.template.textDecoration = "underline";
            categoryAxis.renderer.labels.template.text = "[underline]{category}[/]";

            categoryAxis.renderer.labels.template.adapter.add("text", function (text, target) {
                let catData = categories.find(c => c.category === target.dataItem?.category);
                return catData?.category || "";
            });

            categoryAxis.renderer.labels.template.events.on("hit", function (ev) {
                let labelCat = ev.target.dataItem.category;
                let item = categories.find(c => c.category === labelCat);
                if (item?.otId) {
                    window.location.href = `/Mrop/EditOutputTask/${item.otId}`;
                }
            });

            categoryAxis.data = categories;

            // X Axis (Time)
            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.baseInterval = { count: 1, timeUnit: "day" };
            dateAxis.strictMinMax = true;
            dateAxis.renderer.tooltipLocation = 0;
            dateAxis.renderer.minZoomCount = 25;
            dateAxis.mouseWheelZoomEnabled = true;
            dateAxis.mouseWheelScrollEnabled = true;

            // Series (Bars)
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.columns.template.height = am4core.percent(25);
            series.clustered = false;
            series.dataFields.openDateX = "start";
            series.dataFields.dateX = "end";
            series.dataFields.categoryY = "category";
            series.columns.template.propertyFields.fill = "color";

            // Offset overlapping bars by track index
            series.columns.template.adapter.add("dy", function (dy, target) {
                const track = target.dataItem.dataContext.track || 0;
                return track * 30; // Vertical offset per overlap
            });

            // Tooltip
            series.tooltip.pointerOrientation = "vertical"; // Top-bottom orientation
            series.columns.template.tooltipY = am4core.percent(0); // Force tooltip above bar
            series.tooltip.label.zIndex = 1000; // Make sure tooltip is on top

            let currentPopup = null;
            series.columns.template.events.on("hit", function(ev) {
                if (currentPopup) currentPopup.close();

                let dataItem = ev.target.dataItem;
                let context = dataItem.dataContext;

                let openDateX = typeof context.start === "string" ? context.start : new Date(context.start).toISOString().split("T")[0];
                let dateX = typeof context.end === "string" ? context.end : new Date(context.end).toISOString().split("T")[0];

                let popup = (`
                    <div style="font-size:14px; max-width: 500px; min-width: 300px;">
                        <strong>${context.felm}</strong><br/>
                        From: <em>${openDateX}</em><br/>
                        To: <em>${dateX}</em><br/>
                        <a style="margin-top: 20px; text-decoration: none;" href='/Mrop/EditAssignedFelm/${context.id}' target='_blank'><img style="vertical-align: baseline;" src='@Url.Content("~/images/Edit.png")' height='20' width='20' /> Edit</a>
                    </div>
                `);

                currentPopup = chart.openPopup(popup);
                currentPopup.showCurtain = true;
                currentPopup.closable = true;
                currentPopup.title = context.category;
            });

            chart.tooltipContainer.layout = "absolute";
            chart.tooltipContainer.zIndex = 1000;

            // Label on bars
            var labelBullet = series.bullets.push(new am4charts.LabelBullet());
            labelBullet.label.text = "{felm}";
            labelBullet.label.fontSize = 13;
            labelBullet.label.fontWeight = "bold";
            labelBullet.label.truncate = true; // Show full label when zoomed
            labelBullet.label.hideOversized = false; // Prevent hiding on zoom
            labelBullet.label.horizontalCenter = "middle";
            labelBullet.label.isMeasured = true;
            labelBullet.label.interactionsEnabled = false; // Allow clicks to pass through

            labelBullet.dy = 0; // default
            labelBullet.adapter.add("dy", function (dy, target) {
                const track = target.dataItem.dataContext.track || 0;
                return track * 30; // Same offset as bar
            });

            // Navigate on bar click
            series.columns.template.events.on("click", function (ev) {
                const context = ev.target.dataItem.dataContext;
                if (context.otId) {
                    window.location.href = `/Mrop/EditOutputTask/${context.otId}`;
                }
            });

            // Scrollbar
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.start = startpoint;

            // Today marker
            var todayRange = dateAxis.axisRanges.create();
            todayRange.date = new Date();
            todayRange.grid.stroke = am4core.color("grey");
            todayRange.grid.strokeWidth = 2;
            todayRange.label.text = "Today";
            todayRange.label.fill = am4core.color("grey");
            todayRange.label.verticalCenter = "bottom";
        });
    </script>
}
