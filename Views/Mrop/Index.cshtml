@using static Constants
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Text.Json
@model SMARTV3.Models.OutputForceElement;
@inject IViewLocalizer localizer

@{
    ViewData["Title"] = localizer["Mrop"];
    Layout = "~/Views/Shared/_Layout.cshtml";
    var outputNames = ViewBag.OTs as List<string>;
}

<style>
#chartdiv {
  width: 100%;
  height: 80vh;
  padding: 5vh;
  min-height: 500px;
}

.button{
  background-color: white;
  border: 2px solid black;
  border-color: #33CC33;
  border-radius: 12px;
  color: #33CC33;
  padding: 6px 12px;
  text-align: center;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  float: right;
  margin-right: 50px;
}
.button:hover {
  background-color: #33CC33;
  color: white;
}

</style>

    <div class="secretbannerdiv">@localizer["SecretFiveEyesOnly"]</div>
    <br /> <br />
  

<h5>@localizer["MROP"]</h5>

<p>
    <div class="row justify-content-between">
        <div class="col-auto mr-auto">
             <label for="CreateOutputTask">@localizer["CreateOutputTask"]</label><br />
            <a asp-action="CreateOutputTask">
                <img src='@Url.Content("~/images/Add.png")' height="40" width="40" title="@localizer["CreateOutputTask"]" />
            </a>
        </div>
        <div class="col-auto">
            <label for="AssignFelm">@localizer["AssignForceElement"]</label><br />
            <a asp-action="AssignFelm">
                <img src='@Url.Content("~/images/Add.png")' height="40" width="40" title="@localizer["AssignForceElement"]" />
            </a>
        </div>
    </div>
</p>

<div id="chartdiv"></div>

@section Scripts{
    <script src="~/js/amCharts/core.js"></script>
    <script src="~/js/amCharts/charts.js"></script>
    <script src="~/js/amCharts/themes/animated.js"></script>

    <script>
        var json = '@ViewBag.gantData';
        json = json.replaceAll("&quot;", "\"");
        var data = JSON.parse(json);

        var allOT = @Html.Raw(ViewBag.OTs);
        console.log(allOT);

        var max = null;
        var min = null;
        for (var i = 0; i < data.length; i++) {
          var current = data[i];
          if (max === null || current.end > max.end) {
            max = current;
          }
          if (min === null || current.start < min.start) {
            min = current;
          }
        }
        var startpoint = 0;
        if(min !== null && max !== null){
            var daysTotal = Math.floor((Date.parse(max.end) - Date.parse(min.start)) / 86400000);
            if (daysTotal != 0) {
                var towWeeksAgo = new Date();
                towWeeksAgo.setDate(towWeeksAgo.getDate() - 14);
                var daysCurrent = Math.floor((towWeeksAgo - Date.parse(min.start)) / 86400000);
                var startpoint = daysCurrent / daysTotal;
                if (startpoint > 1) {
                    startpoint = 0;
                }
            }
        }
        var chart;

        am4core.addLicense('@Constants.licensekey');
        am4core.ready(function () {
            am4core.useTheme(am4themes_animated);
            chart = am4core.create("chartdiv", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0;

            chart.paddingRight = 30;
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";

            var colorSet = new am4core.ColorSet();
            colorSet.saturation = 0.4;

            var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "category";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.inversed = true;
            categoryAxis.data = allOT.map(cat => ({ category: cat.category, otId: cat.otId }));
            categoryAxis.renderer.labels.template.html = '<a href="Mrop/EditOutputTask/{otId}">{category}</a>';

            chart.data = data; 

            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.dateFormatter.dateFormat = "yyyy-MM-dd";
            dateAxis.renderer.minGridDistance = 100;
            dateAxis.baseInterval = { count: 30, timeUnit: "minute" };
       
            dateAxis.strictMinMax = true;
            dateAxis.renderer.tooltipLocation = 0;

            var series1 = chart.series.push(new am4charts.ColumnSeries());
            series1.columns.template.width = am4core.percent(80);

            series1.columns.template.interactionsEnabled = true;
            series1.columns.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;

            var hs = series1.columns.template.states.create("hover");
            hs.properties.fillOpacity = 0.7;

            series1.dataFields.openDateX = "start";
            series1.dataFields.dateX = "end";
            series1.dataFields.categoryY = "category";
            series1.columns.template.propertyFields.fill = "color";
            series1.columns.template.strokeOpacity = 1;
            series1.columns.template.fillOpacity = .75;

            series1.columns.template.draggable = true;

            let dragStartX = 0;

            series1.columns.template.events.on("dragstart", function (ev) {
                dragStartX = ev.target.pixelX;  
            });

            series1.columns.template.events.on("dragstop", function(ev) {
                var dataItem = ev.target.dataItem;
                var dragEndX = ev.target.pixelX;
                var chartData = series1.chart.data;
                var deltaPixel = dragEndX - dragStartX;

                var dateAxis = chart.xAxes.getIndex(0);

                var dateMin= dateAxis.min;
                var dateMax = dateAxis.max;
                var axisPixel = dateAxis.pixelWidth;

                var time = (dateMax - dateMin) * (deltaPixel / axisPixel);  

                let context = dataItem.dataContext;
                let index = chart.data.indexOf(context);

                let originalstart = new Date(dataItem.dataContext.start);
                let originalend = new Date(dataItem.dataContext.end);

                let Dstart = new Date(originalstart.getTime() + time);
                let Dend = new Date(originalend.getTime() + time);

                 if(typeof Dstart != "string"){
                    Dstart = Dstart.toISOString();
                }
                if(typeof Dend != "string"){
                    Dend = Dend.toISOString();
                }

                Dstart = Dstart.split(".")[0];
                Dend = Dend.split(".")[0];

                chartData[index].start = Dstart;
                chartData[index].end = Dend;

                chart.invalidateRawData();

                dragStartX = ev.target.pixelX;
            });

            let currentPopup = null;

            series1.columns.template.events.on("hit", function(ev) {
                if (currentPopup) {
                  currentPopup.close();
                }

                let dataItem = ev.target.dataItem;
                let felm = dataItem.dataContext.felm;
                let openDateX = dataItem.dataContext.start;
                if(typeof openDateX != "string"){
                    openDateX = openDateX.toISOString();
                }
                let dateX = dataItem.dataContext.end;
                  if(typeof dateX != "string"){
                    dateX = dateX.toISOString();
                }
                let id = dataItem.dataContext.id;
                let cat = dataItem.dataContext.category;
       
                openDateX = openDateX.split("T")[0];
                dateX = dateX.split("T")[0];

                let popup = chart.openPopup(`<b>${cat}:<br>${felm}: ${openDateX} - ${dateX}</b><br><a href="/Mrop/EditAssignedFelm/${id}">Edit</a>`)
                currentPopup = popup;
              
            }, this);

            var valueLabel = series1.bullets.push(new am4charts.LabelBullet());
            valueLabel.label.text = "{felm}";
            valueLabel.label.fontSize = 15;
            valueLabel.label.dx = 10;
            
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.start = startpoint;

            var range = dateAxis.axisRanges.create();
            range.date = new Date();
            range.grid.stroke = am4core.color("red");
            range.grid.strokeWidth = 2;
            range.grid.strokeOpacity = 1;

            //EXTENDING THE BARS

            
            
            let extend = series1.columns.template.createChild(am4core.Circle);
            extend.radius = 3;
            extend.fill = am4core.color("#555");
            extend.stroke = am4core.color("#fff");

            extend.cursorOverStyle = am4core.MouseCursorStyle.horizontalResize;
            extend.isMeasured = false;

            extend.tooltipText = "Adjust Force Element Timeframe";
            extend.draggable = true;

            extend.horizontalCenter = "right";
            extend.verticalCenter = "middle";

            extend.adapter.add("dx", function(dx, target) {
                return target.parent.pixelWidth;
            });

            extend.adapter.add("dy", function(dy, target) {
                return target.parent.pixelHeight / 2;
            });

            let extendStartX = 0;

            extend.events.on("dragstart", function (ev) {
                extendStartX = ev.target.pixelX;
                ev.target.parent.draggable = false;
            });

            extend.events.on("dragstop", function (ev) {

                var dataItem = ev.target.parent.dataItem;
                var dragEndX = ev.target.pixelX;
                var deltaPixel = dragEndX - extendStartX;

                var dateAxis = chart.xAxes.getIndex(0);

                var dateMin= dateAxis.min;
                var dateMax = dateAxis.max;
                var axisPixel = dateAxis.pixelWidth;

                var time = (dateMax - dateMin) * (deltaPixel / axisPixel);  

                let context = dataItem.dataContext;
                let index = chart.data.indexOf(context);

                let originalstart = new Date(context.start);
                let originalend = new Date(context.end);

                let extendEnd = new Date(originalend.getTime() + time);

                      
                context.start = originalstart.toISOString();
                context.end = extendEnd.toISOString();

  
                chart.invalidateRawData();

 
              
                
            });
    
    }); // end am4core.ready()

    function UpdateFelm() {
        const updatedData = chart.data.map(update => {
            return {
                id: update.id,
                start: new Date(update.start).toISOString(),
                end: new Date(update.end).toISOString()
            };
        });

    
        document.getElementById("GanttJsonData").value = JSON.stringify(updatedData);

    
        document.getElementById("hiddenUpdateForm").submit();
    }

    function datediff(first, second) {        
    return Math.round((second - first) / (1000 * 60 * 60 * 24));
}
        
    </Script>

    <form id="hiddenUpdateForm" method="post" action="/Mrop/UpdateFelm">
        <input type="hidden" name="GanttJsonData" id="GanttJsonData" />
    </form>

    <button type="button" class="button"  onclick="UpdateFelm()">Update</button>
}
