@model Tuple<SMARTV3.Models.OutputTask, SMARTV3.Models.OutputForceElement>

@using static Constants
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer

@{
    ViewData["Title"] = localizer["Mrop"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="secretbannerdiv">
    @localizer["SecretFiveEyesOnly"]
</div>
<br /> <br />

<h5>@localizer["MROP"]</h5>

<!-- Create and Assign buttons-->
<div class="row justify-content-between mb-4">
    <div class="col-auto">
        <a class="btn btn-md btn-secondary" asp-action="CreateOutputTask">
            <img style="filter: invert(1);" src='@Url.Content("~/images/Add.png")' height="25" width="25" alt="@localizer["CreateOutputTask"]" />
            <span style="font-weight:500; font-size: 1rem;">@localizer["CreateOutputTask"]</span>
        </a>
    </div>
    <div class="col-auto">
        <a class="btn btn-md btn-secondary" asp-action="AssignFelm">
            <img style="filter: invert(1);" src='@Url.Content("~/images/Add.png")' height="25" width="25" alt="@localizer["AssignForceElement"]" />
            <span style="font-weight:500; font-size: 1rem;">@localizer["AssignForceElement"]</span>
        </a>
    </div>
</div>

<!-- Filters & Search -->
<div class="row mb-3 text-center">
    <div class="col">        
        <div class="row">
            <div class="col px-0">
                <label class="form-label" for="categoryFilter"><strong>Filter by Category:</strong></label>
            </div>
        </div>
        <div class="row">
            <div class="col px-0">
                <select id="categoryFilter" class="form-control d-inline-block" style="width: 250px;">
                    <option value="all">All</option>
                </select>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="row">
            <div class="col px-0">
                <label class="form-label" for="searchBox"><strong>Search by Force Element:</strong></label>
            </div>
        </div>
        <div class="row">
            <div class="col px-0">
                <input type="text" id="searchBox" class="form-control d-inline-block" style="width: 250px;" placeholder="e.g. Air Task Force" />
            </div>
        </div>
    </div>
    <div class="col">
        <div class="row">
            <div class="col px-0">
                <label class="form-label" for="dateRange"><strong>Date Range:</strong></label>
            </div>
        </div>
        <div class="row">
            <div class="col px-0">
                <input type="text" id="dateRange" class="form-control d-inline-block" style="width: 250px;" readonly />
                <button type="button" id="btnClearDateRange" class="btn btn-sm btn-primary visually-hidden">Clear</button>
            </div>
        </div>
    </div>
</div>

<!-- Legend / Readiness -->
<div class="text-center mb-4">
    <h3>SMaRT Status</h3>
    <div class="row">
        <div class="col mx-1 p-1 LegendStatus" style="background-color: lime; color: #1e1e1e;">Ready</div>
        <div class="col mx-1 p-1 LegendStatus" style="background-color: yellow; color: #1e1e1e;">Ready with Limits</div>
        <div class="col mx-1 p-1 LegendStatus" style="background-color: orange; color: #1e1e1e;">Combat Ineffective</div>
        <div class="col mx-1 p-1 LegendStatus" style="background-color: red; color: #fff;">Not Ready</div>
    </div>
</div>

<!-- Toolbar Buttons -->
<div class="btn-toolbar mb-2" role="toolbar" aria-label="Toolbar with export and view options">
    <div class="btn-group me-2" role="group">
        @* <button class="btn btn-outline-secondary" onclick="exportToCSV()">Export CSV</button> *@
        <button class="btn btn-outline-secondary" onclick="exportToPNG()">Export PNG</button>
        @* <button class="btn btn-outline-secondary" onclick="exportToPDF()">Export PDF</button> *@
    </div>

    <div class="btn-group me-2" role="group">
        <button class="btn btn-outline-primary" onclick="ZoomTo('Week')">Week</button>
        <button class="btn btn-outline-primary" onclick="ZoomTo('Month')">Month</button>
        <button class="btn btn-outline-primary" onclick="ZoomTo('Year')">Year</button>
    </div>
</div>

<!-- Timeline container -->
<div id="Chart">
    <div class="ChartLoader text-primary">
        <div class="spinner-border"></div>
    </div>

    <div id="timeline"></div>
</div>

<!-- Modal -->
<div class="modal fade" id="infoModal" tabindex="-1" aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow-sm">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="infoModalLabel">Force Element Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <dl class="row" id="modalContent">
                    <!-- filled dynamically -->
                </dl>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- MROP Chart -->
    <link rel="stylesheet" href="~/css/MROPChart.css" asp-append-version="true" />
    <!-- Vis.js Chart TODO: Download to local files -->
    <script src="https://unpkg.com/vis-timeline@latest/standalone/umd/vis-timeline-graph2d.min.js"></script>
    <link href="https://unpkg.com/vis-timeline@latest/styles/vis-timeline-graph2d.min.css" rel="stylesheet" />
    <!-- Export JS TODO: Download to local files -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Date Range Picker TODO: Download to local files -->
    <script src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

    <script>
        $(document).ready(function() {
            setTimeout(function() {
                $(".ChartLoader").addClass("visually-hidden");
            }, 1500);
        });

        let timeline;
        let CategoriesData = [];
        let FELMData = [];

        // Parsing data from ViewBag
        var felmJson = '@ViewBag.gantData'.replaceAll("&quot;", '"');
        FELMData = JSON.parse(felmJson);
        var categoriesJson = '@ViewBag.gantCategories'.replaceAll("&quot;", '"');
        CategoriesData = JSON.parse(categoriesJson);

        // Loading the data in the timeline
        const container = document.getElementById('timeline');

        // Set category column
        const groups = new vis.DataSet(CategoriesData.map(cat => ({
            id: cat.otId,
            content: `<a href="/Mrop/EditOutputTask/${cat.otId}">${cat.category}</a>`
        })));

        // Gets category color 
        function getColorForGroup(groupId) {
            const el = FELMData.find(f => f.otId === groupId);
            return el ? el.color : '#ccc';
        }

        // Set felm data in chart
        function getItems(data) {
            return data.map(item => ({
                id: item.id,
                group: item.otId,
                content: item.felm.length > 40 ? item.felm.slice(0, 40) + "..." : item.felm,
                start: item.start,
                end: item.end,
                title: `${item.felm}`,
                style: `background-color:${item.color}; color:white;`,
                fullText: item.felm,
            }));
        }

        // Setting chart options and data
        const originalItems = getItems(FELMData);
        const items = new vis.DataSet(originalItems);

        const options = {
            stack: true,
            groupOrder: 'content',
            margin: { item: 10, axis: 5 },
            orientation: 'top',
            zoomMin: 1000 * 60 * 60 * 24 * 7,
            zoomMax: 1000 * 60 * 60 * 24 * 365 * 3,
        };

        // Initializing chart
        timeline = new vis.Timeline(container, items, groups, options);

        // Category filter
        const filterSelect = document.getElementById("categoryFilter");
        filterSelect.innerHTML = `<option value="all">All</option>`;
        CategoriesData.forEach(cat => {
            const color = getColorForGroup(cat.otId);
            const option = document.createElement("option");
            option.value = cat.otId;
            option.innerHTML = `&#x25A0; ${cat.category}`;
            option.style.color = color;
            option.style.fontWeight = 500;
            filterSelect.appendChild(option);
        });

        filterSelect.addEventListener("change", applyFilters);
        document.getElementById("searchBox").addEventListener("input", applyFilters);

        // // Modal Date Range
        // let modalStartMinDate = null, modalStartMaxDate = null;
        // let modalEndMinDate = null, modalEndMaxDate = null;

        // $('#modalStartDateRange').daterangepicker({
        //     "singleDatePicker": true,
        //     "showDropdowns": true,
        //     "showWeekNumbers": true,
        //     "linkedCalendars": false,
        //     "opens": "center",
        //     "drops": "auto",
        //     "cancelButtonClasses": "btn-secondary",
        //     "autoUpdateInput":true,
        //     "autoApply":true,
        // });

        // $('#modalEndDateRange').daterangepicker({
        //     "singleDatePicker": true,
        //     "showDropdowns": true,
        //     "showWeekNumbers": true,
        //     "linkedCalendars": false,
        //     "opens": "center",
        //     "drops": "auto",
        //     "cancelButtonClasses": "btn-secondary",
        //     "autoUpdateInput":true,
        //     "autoApply":true,
        // });

        // Date Range
        let minDate = null, maxDate = null;

        $('#dateRange').daterangepicker({
            "cancelButtonClasses": "btn-secondary",
            "autoUpdateInput": false,
            "showDropdowns": true,
            "showWeekNumbers": true,
            "linkedCalendars": false,
            "opens": "center",
            "drops": "auto",
            "minYear": moment().year() - 5,
            "maxYear": moment().year() + 5
        });

        $('#dateRange').on('apply.daterangepicker', function (ev, picker) {
            minDate = picker.startDate;
            maxDate = picker.endDate;
            applyFilters(minDate, maxDate);
            $(this).val(picker.startDate.format('YYYY-MM-DD') + ' - ' + picker.endDate.format('YYYY-MM-DD'));
            console.log(moment().toDate());
            $('#btnClearDateRange').removeClass("visually-hidden");
        });

        $('#dateRange').on('cancel.daterangepicker', function () {
            minDate = maxDate = null;
            $(this).val('');
            applyFilters();
            $('#btnClearDateRange').addClass("visually-hidden");
        });

        $("#btnClearDateRange").on("click", function() {
            minDate = maxDate = null;
            $("#dateRange").val('');
            applyFilters();
            $('#btnClearDateRange').addClass("visually-hidden");
        });

        // Applying filters to the chart
        function applyFilters() {
            const selectedCat = filterSelect.value;
            const searchTerm = document.getElementById("searchBox").value.toLowerCase();

            const filtered = originalItems.filter(item => {
                const matchCat = selectedCat === "all" || item.group == selectedCat;
                const matchText = item.fullText.toLowerCase().includes(searchTerm);

                const formattedMinDate = minDate ? moment(minDate).format('YYYY-MM-DD') : null;
                const formattedMaxDate = maxDate ? moment(maxDate).format('YYYY-MM-DD') : null;

                const matchDate = (!formattedMinDate || moment(item.start, 'YYYY-MM-DD').isSameOrAfter(formattedMinDate)) &&
                                    (!formattedMaxDate || moment(item.end, 'YYYY-MM-DD').isSameOrBefore(formattedMaxDate));
                
                return matchCat && matchText && matchDate;
            });
            timeline.setItems(filtered);
        }

        // Modal click handler (Popup menu)
        timeline.on('select', function (props) {
            const selectedId = props.items[0];
            const item = FELMData.find(i => i.id === selectedId);
            let SmartStatusDesc = null;
            let SmartStatusFontColor = "#1e1e1e";
            
            try {
                switch (item.color) {
                    case "lime":
                        SmartStatusDesc = "Ready";
                        break;
                    case "yellow":
                        SmartStatusDesc = "ready with Limits";
                        break;
                    case "orange":
                        SmartStatusDesc = "Combat Ineffective";
                        break;
                    case "red":
                        SmartStatusDesc = "Not Ready";
                        SmartStatusFontColor = "#fff";
                        break;
                    default:
                        break;
                }
            }
            catch (e) {
                console.log("This Force Element does not have a SMaRT Status : " + e);
            }

            if (item) {
                document.getElementById('infoModalLabel').textContent = item.felm;
                document.getElementById('modalContent').innerHTML = `
                    <div class="row justify-content-lg-start my-2">
                        <div class="col-3">
                            <label class="col-form-label"><strong>Category:</strong></label>
                        </div>
                        <div class="col-auto">
                            <input type="text" class="form-control" style="width: 250px;" value="${item.category}" readonly />
                        </div>
                    </div>
                    <div class="row justify-content-lg-start my-2">
                        <div class="col-3">
                            <label class="col-form-label"><strong>Start:</strong></label>
                        </div>
                        <div class="col-auto">
                            <input type="datetime" class="form-control" style="width: 250px;" value="${item.start}" readonly />
                        </div>
                    </div>
                    <div class="row justify-content-lg-start my-2">
                        <div class="col-3">
                            <label class="col-form-label"><strong>End:</strong></label>
                        </div>
                        <div class="col-auto">
                            <input type="datetime" class="form-control" style="width: 250px;" value="${item.end}" readonly />
                        </div>
                    </div>
                    <div class="row justify-content-lg-start my-2">
                        <div class="col-3">
                            <label class="col-form-label"><strong>SMaRT Status:</strong></label>
                        </div>
                        <div class="col-auto">
                            <div class="col mx-0 p-0 LegendStatusModal" style="background-color: ${item.color}; color: ${SmartStatusFontColor};">${SmartStatusDesc}</div>
                        </div>
                    </div>
                    <div class="row justify-content-lg-start mt-3">
                        <div class="col-auto btn-group" role="group" aria-label="Edit Force Element">
                            <a class="btn btn-primary" href="Mrop/EditAssignedFelm/${item.id}">Edit Force Element</a>
                        </div>
                    </div>
                `;
                const modal = new bootstrap.Modal(document.getElementById('infoModal'));
                modal.show();
            }
        });

        // Zoom Presets and function
        const zoomPresets = {
            "Week": [moment().subtract(1, 'days').toDate(), moment().add(7, 'days').toDate()],
            "Month": [moment().subtract(1, 'months').toDate(), moment().add(2, 'months').toDate()],
            "Year": [moment().subtract(6, 'months').toDate(), moment().add(1, 'years').toDate()],
        };

        function ZoomTo(range) {
            const [start, end] = zoomPresets[range];
            timeline.setWindow(start, end, {animation: true });
        }

        // Export functions
        function exportToCSV() {
            const rows = [["ID", "Category", "Force Element", "Start", "End"]];
            FELMData.forEach(item => {
                rows.push([item.id, item.category, item.felm, item.start, item.end]);
            });

            const csv = rows.map(row => row.map(v => `"${v}"`).join(",")).join("\n");
            const blob = new Blob([csv], { type: "text/csv" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "timeline_export.csv";
            link.click();
        }

        function exportToPNG() {
            html2canvas(document.getElementById("timeline"), { scale: 2 }).then(canvas => {
                const link = document.createElement("a");
                link.download = "timeline.png";
                link.href = canvas.toDataURL("image/png"); // Explicitly set PNG format
                document.body.appendChild(link); // Ensure it's added to the DOM
                link.click();
                document.body.removeChild(link); // Cleanup after download
            });
        }

        function exportToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({
                orientation: "landscape",
                unit: "px",
                format: "a4" // Standard A4 size
            });

            html2canvas(document.querySelector("#timeline"), { scale: 2 }).then(canvas => {
                const imgData = canvas.toDataURL("image/png");
                const imgWidth = doc.internal.pageSize.getWidth();
                const imgHeight = (canvas.height * imgWidth) / canvas.width; // Maintain aspect ratio

                doc.addImage(imgData, "PNG", 10, 10, imgWidth - 20, imgHeight); // Adjusted scaling
                doc.save("timeline.pdf");
            });
        }
    </script>
}
