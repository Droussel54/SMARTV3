@using static Constants
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Text.Json
@model SMARTV3.Models.OutputForceElement;
@inject IViewLocalizer localizer

@{
    ViewData["Title"] = localizer["Mrop"];
    Layout = "~/Views/Shared/_Layout.cshtml";
    var outputNames = ViewBag.OTs as List<string>;
}

<style>
#chartdiv {
  width: 100%;
  height: 80vh;
  padding: 5vh;
  min-height: 500px;
}

</style>

    <div class="secretbannerdiv">@localizer["SecretFiveEyesOnly"]</div>
    <br /> <br />

<h5>@localizer["MROP"]</h5>

<p>
    <div class="row justify-content-between">
        <div class="col-auto mr-auto">
             <label for="CreateOutputTask">@localizer["CreateOutputTask"]</label><br />
            <a asp-action="CreateOutputTask">
                <img src='@Url.Content("~/images/Add.png")' height="40" width="40" title="@localizer["CreateOutputTask"]" />
            </a>
        </div>
        <div class="col-auto">
            <label for="AssignFelm">@localizer["AssignForceElement"]</label><br />
            <a asp-action="AssignFelm">
                <img src='@Url.Content("~/images/Add.png")' height="40" width="40" title="@localizer["AssignForceElement"]" />
            </a>
        </div>
    </div>
</p>

<div id="chartdiv"></div>

@section Scripts{
    <script src="~/js/amCharts/core.js"></script>
    <script src="~/js/amCharts/charts.js"></script>
    <script src="~/js/amCharts/themes/animated.js"></script>

    <script>
        var json = '@ViewBag.gantData';
        json = json.replaceAll("&quot;", "\"");
        var data = JSON.parse(json);

        var allOT = @Html.Raw(Json.Serialize(ViewBag.OTs));
        console.log(allOT);

        var max = null;
        var min = null;
        for (var i = 0; i < data.length; i++) {
          var current = data[i];
          if (max === null || current.end > max.end) {
            max = current;
          }
          if (min === null || current.start < min.start) {
            min = current;
          }
        }
        var startpoint = 0;
        if(min !== null && max !== null){
            var daysTotal = Math.floor((Date.parse(max.end) - Date.parse(min.start)) / 86400000);
            if (daysTotal != 0) {
                var towWeeksAgo = new Date();
                towWeeksAgo.setDate(towWeeksAgo.getDate() - 14);
                var daysCurrent = Math.floor((towWeeksAgo - Date.parse(min.start)) / 86400000);
                var startpoint = daysCurrent / daysTotal;
                if (startpoint > 1) {
                    startpoint = 0;
                }
            }
        }

        am4core.addLicense('@Constants.licensekey');
        am4core.ready(function () {
            am4core.useTheme(am4themes_animated);
            var chart = am4core.create("chartdiv", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0;

            chart.paddingRight = 30;
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";



            var colorSet = new am4core.ColorSet();
            colorSet.saturation = 0.4;

            var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
            categoryAxis.renderer.labels.template.html = '<a href="Mrop/EditOutputTask/{otId}">{category}</a>';
            categoryAxis.dataFields.category = "category";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.inversed = true;
            categoryAxis.data = allOT.map(cat => ({ category: cat }));

            chart.data = data; 

            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.dateFormatter.dateFormat = "yyyy-MM-dd";
            dateAxis.renderer.minGridDistance = 70;
            dateAxis.baseInterval = { count: 30, timeUnit: "minute" };
       
            dateAxis.strictMinMax = true;
            dateAxis.renderer.tooltipLocation = 0;

            var series1 = chart.series.push(new am4charts.ColumnSeries());
            series1.tooltip.label.interactionsEnabled = true;
            series1.tooltip.keepTargetHover = true;
            series1.columns.template.width = am4core.percent(80);
            series1.columns.template.tooltipHTML = '<b>{felm}: {openDateX} - {dateX}</b><br><a href="Mrop/EditAssignedFelm/{id}">Edit</a>' //"{felm}: {openDateX} - {dateX}";

            series1.dataFields.openDateX = "start";
            series1.dataFields.dateX = "end";
            series1.dataFields.categoryY = "category";
            series1.columns.template.propertyFields.fill = "color";
            series1.columns.template.strokeOpacity = 1;
            series1.columns.template.fillOpacity = .75;

            var valueLabel = series1.bullets.push(new am4charts.LabelBullet());
            valueLabel.label.text = "{felm}";
            valueLabel.label.fontSize = 15;
            valueLabel.label.dx = 10;
            
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.start = startpoint;

            var range = dateAxis.axisRanges.create();
            range.date = new Date();
            range.grid.stroke = am4core.color("red");
            range.grid.strokeWidth = 2;
            range.grid.strokeOpacity = 1;

    }); // end am4core.ready()

    function datediff(first, second) {        
    return Math.round((second - first) / (1000 * 60 * 60 * 24));
}
        
    </Script>
}
