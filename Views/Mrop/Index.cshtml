@model Tuple<SMARTV3.Models.OutputTask, SMARTV3.Models.OutputForceElement>

@using static Constants
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer

@{
    ViewData["Title"] = localizer["Mrop"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="secretbannerdiv">
    @localizer["SecretFiveEyesOnly"]
</div>
<br /> <br />

<h5>@localizer["MROP"]</h5>

@* <!-- Create and Assign buttons-->
<div class="row justify-content-between mb-4">
    <div class="col-auto">
        <a class="btn btn-md btn-outline-secondary" asp-action="CreateOutputTask">
            <img src='@Url.Content("~/images/Add.png")' height="25" width="25" alt="@localizer["CreateOutputTask"]" />
            <span style="font-weight:500; font-size: 1rem;">@localizer["CreateOutputTask"]</span>
        </a>
    </div>
    <div class="col-auto">
        <a class="btn btn-md btn-outline-secondary" asp-action="AssignFelm">
            <img src='@Url.Content("~/images/Add.png")' height="25" width="25" alt="@localizer["AssignForceElement"]" />
            <span style="font-weight:500; font-size: 1rem;">@localizer["AssignForceElement"]</span>
        </a>
    </div>
</div> *@

<!-- Filters & Search -->
<div class="row mb-3 text-center">
    <div class="col">
        <div class="row">
            <div class="col px-0">
                <label class="form-label" for="categoryFilter"><strong>Filter by Category:</strong></label>
            </div>
        </div>
        <div class="row">
            <div class="col px-0">
                @* <select id="categoryFilter" class="form-control d-inline-block" style="width: 250px;">
                    <option value="all">All</option>
                </select> *@
                
                <select id="categoryFilter" class="d-inline-block" style="width: 250px;" multiple
                        data-live-search="true"
                        data-live-search-placeholder="Looking for?"
                        data-selected-text-format="count > 2"
                        data-style="border border-dark-subtle"
                        data-actions-box="true"
                        data-dropup-auto="false"
                        autocomplete="off">
                </select>
                <button type="button" id="btnClearSelectedCat" class="btn btn-sm btn-primary visually-hidden">Clear</button>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="row">
            <div class="col px-0">
                <label class="form-label" for="searchBox"><strong>Search by Force Element:</strong></label>
            </div>
        </div>
        <div class="row">
            <div class="col px-0">
                <input type="text" id="searchBox" class="form-control d-inline-block" style="width: 250px;" placeholder="e.g. Air Task Force" />
                <button type="button" id="btnClearSearchBox" class="btn btn-sm btn-primary visually-hidden">Clear</button>
            </div>
        </div>
    </div>
    @* <div class="col">
        <div class="row">
            <div class="col px-0">
                <label class="form-label" for="dateRange"><strong>Date Range:</strong></label>
            </div>
        </div>
        <div class="row">
            <div class="col px-0">
                <input type="text" id="dateRange" name="dateRange" class="form-control d-inline-block" style="width: 250px;" readonly />
                <button type="button" id="btnClearDateRange" class="btn btn-sm btn-primary visually-hidden">Clear</button>
            </div>
        </div>
    </div> *@
    <div class="col">
        <div class="row">
            <div class="col px-0">
                <label class="form-label" for="dateRange"><strong>Search by Priority:</strong></label>
            </div>
        </div>
        <div class="row">
            <div class="col px-0">
                <!--Change this to add search function-->
                <input type="number" id="searchPRIBox" class="form-control d-inline-block" style="width: 250px;" placeholder="e.g. 0 - 10.0" min="0" max="10" />
                <!--The priority value is stored in dbo.OutputTask, column: Priority-->
            </div>
        </div>
    </div>
</div>

<!-- Legend / Readiness -->
<div class="text-center mb-4">
    <h3>SMaRT Status</h3>
    <div class="row">
        <div class="col">
            <input type="checkbox" id="smart-status-1" class="btn-check" name="SMARTStatus1" value="SMARTStatus1" autocomplete="off" />
            <label class="btn btn-smart-status-1 btn-smart-status-unchecked LegendStatus" for="smart-status-1" title="View by Ready Status">Ready</label>
        </div>
        <div class="col">
            <input type="checkbox" id="smart-status-2" class="btn-check" name="SMARTStatus2" value="SMARTStatus2" autocomplete="off" />
            <label class="btn btn-smart-status-2 btn-smart-status-unchecked LegendStatus" for="smart-status-2" title="View by Ready with Limits Status">Ready with Limits</label>
        </div>
        <div class="col">
            <input type="checkbox" id="smart-status-3" class="btn-check" name="SMARTStatus3" value="SMARTStatus3" autocomplete="off" />
            <label class="btn btn-smart-status-3 btn-smart-status-unchecked LegendStatus" for="smart-status-3" title="View by Combat Ineffective Status">Combat Ineffective</label>
        </div>
        <div class="col">
            <input type="checkbox" id="smart-status-4" class="btn-check" name="SMARTStatus4" value="SMARTStatus4" autocomplete="off" />
            <label class="btn btn-smart-status-4 btn-smart-status-unchecked LegendStatus" for="smart-status-4" title="View by Not Ready Status">Not Ready</label>
        </div>
    </div>
</div>

<!-- Toolbar Buttons -->
<div class="btn-toolbar mb-2 justify-content-between" role="toolbar" aria-label="Toolbar with exports, views and actions options">
    <!-- Buttons -->
    <div class="btn-group me-2" role="group">
        <!-- Exports -->
        @* <button class="btn btn-outline-secondary" onclick="exportToCSV()">Export CSV</button> *@
        <button class="btn btn-outline-secondary" onclick="exportToPNG()" title="Export to PNG the current view">
            <img src='@Url.Content("~/images/download.png")' height="20" width="20" alt="Download image" />
        </button>
        @* <button class="btn btn-outline-secondary" onclick="exportToPDF()">Export PDF</button> *@

        <!-- Views -->
        <button class="btn btn-outline-primary" onclick="ZoomTo('Week')" title="View Weekly">Week</button>
        <button class="btn btn-outline-primary" onclick="ZoomTo('Month')" title="View Monthly">Month</button>
        <button class="btn btn-outline-primary" onclick="ZoomTo('Year')" title="View Yearly">Year</button>
    </div>

    <!-- Actions -->
    <div class="btn-group me-2">
        <div class="dropdown">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="actionDropdown" data-bs-toggle="dropdown" aria-expanded="false" title="Chart Options">Actions</button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="actionDropdown" style="min-width: 260px;">
                <li>
                    <a class="dropdown-item d-flex align-items-center" asp-action="CreateOutputTask">
                        <img src='@Url.Content("~/images/Add.png")' height="20" width="20" alt="@localizer["CreateOutputTask"]" class="me-2" />
                        <span>@localizer["CreateOutputTask"]</span>
                    </a>
                </li>
                <li>
                    <a class="dropdown-item d-flex align-items-center" asp-action="AssignFelm">
                        <img src='@Url.Content("~/images/Add.png")' height="20" width="20" alt="@localizer["AssignForceElement"]" class="me-2" />
                        <span>@localizer["AssignForceElement"]</span>
                    </a>
                </li>
            </ul>
        </div>
    </div>
</div>

<!-- Timeline container -->
<div id="Chart">
    <div class="ChartLoader text-primary">
        <div class="spinner-border"></div>
    </div>

    <div id="timeline"></div>
</div>

<!-- Modal -->
<div class="modal fade" id="infoModal" tabindex="-1" aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow-sm">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="infoModalLabel">Force Element Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <dl class="row" id="modalContent">
                    <!-- filled dynamically -->
                </dl>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- MROP Chart -->
    <link rel="stylesheet" href="~/css/MROPChart.css" asp-append-version="true" />
    <!-- Vis.js Chart -->
    <script src="https://unpkg.com/vis-timeline@latest/standalone/umd/vis-timeline-graph2d.min.js"></script>
    <link href="https://unpkg.com/vis-timeline@latest/styles/vis-timeline-graph2d.min.css" rel="stylesheet" />
    <!-- Export JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Date Range Picker -->
    <script src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
    <!-- Multi-Select Search Box -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/css/bootstrap-select.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/js/i18n/defaults-*.min.js"></script>

    <script>
        $(document).ready(function() {
            $("#searchPRIBox").on("input", function() {
                if ($(this).val() > 10) {
                    $(this).val(function(index, value) {
                        return value.slice(0, -1);
                    });
                }
            });

            $('input[name="dateRange"]').daterangepicker({
                autoUpdateInput: false,
                locale: { cancelLabel: 'Clear' }
            });

            $('input[name="dateRange"]').on('apply.daterangepicker', function(ev, picker) {
                $(this).val(picker.startDate.format('YYYY-MM-DD') + ' - ' + picker.endDate.format('YYYY-MM-DD'));
            });

            $('input[name="dateRange"]').on('cancel.daterangepicker', function() {
                $(this).val('');
            });

            setTimeout(function() {
                $(".ChartLoader").addClass("visually-hidden");
            }, 1500);
        });

        let timeline;
        let CategoriesData = [];
        let FELMData = [];
        let InMemoryGroups;
        let categoryPriorityMap = [];

        // Parsing data from ViewBag
        var felmJson = '@ViewBag.gantData'.replaceAll("&quot;", '"');
        FELMData = JSON.parse(felmJson);
        var categoriesJson = '@ViewBag.gantCategories'.replaceAll("&quot;", '"');
        CategoriesData = JSON.parse(categoriesJson);

        // Mapping Priority data
        CategoriesData.forEach(cat => {
            categoryPriorityMap[cat.otId] = cat.priority;
        });

        // Now assign priority to each FELMData entry
        FELMData.forEach(item => {
            item.priority = categoryPriorityMap[item.otId] ?? null;
        });

        // Loading the data in the timeline
        const container = document.getElementById('timeline');

        // Set category column
        const groups = new vis.DataSet(CategoriesData.map(cat => ({
            id: cat.otId,
            content: `<a href="/Mrop/EditOutputTask/${cat.otId}">${cat.category}</a>`
        })));
        InMemoryGroups = new vis.DataSet(groups.get());

        // Gets category color 
        // function getColorForGroup(groupId) {
        //     const el = FELMData.find(f => f.otId === groupId);
        //     return el ? el.color : '#ccc';
        // }

        // Set felm data in chart
        function getItems(data) {
            return data.map(item => ({
                id: item.id,
                group: item.otId,
                content: item.felm.length > 40 ? item.felm.slice(0, 40) + "..." : item.felm,
                start: new Date(item.start + "T00:00:00"),
                end: new Date(item.end + "T23:59:59"),
                title: `${item.felm}`,
                style: `background-color:${item.color}; color:white;`,
                fullText: item.felm,
                priority: item.priority,
            }));
        }

        // Setting chart options and data
        const originalItems = getItems(FELMData);
        const items = new vis.DataSet(originalItems);

        const options = {
            stack: true,
            groupOrder: 'id',
            margin: { item: 10, axis: 5 },
            orientation: 'top',
            zoomMin: 1000 * 60 * 60 * 24 * 7,
            zoomMax: 1000 * 60 * 60 * 24 * 365 * 3,
            editable: false,
        };

        // Initializing chart
        timeline = new vis.Timeline(container, items, groups, options);

        // Category filter
        const filterSelect = document.getElementById("categoryFilter");
        CategoriesData.forEach(cat => {
            // const color = getColorForGroup(cat.otId);
            const color = "#2d3339";
            const option = document.createElement("option");
            option.value = cat.otId;
            option.innerHTML = `${cat.category}`;
            option.style.color = color;
            option.style.fontWeight = 500;
            filterSelect.appendChild(option);
        });
        // Category Select Initialization
        $('#categoryFilter').selectpicker();
        filterSelect.addEventListener("change", applyFilters);
        // Category Clear Btn
        $("#categoryFilter").on("change", function () {
            if (!($(this).val().length === 0)) {
                $("#btnClearSelectedCat").removeClass("visually-hidden");
            }
            else {
                $("#btnClearSelectedCat").addClass("visually-hidden");
            }
        });
        // Category Clear Btn click function
        $("#btnClearSelectedCat").on("click", function () {
            $("#categoryFilter").selectpicker("deselectAll");
            applyFilters();
        });

        // Search by Force Element
        document.getElementById("searchBox").addEventListener("input", applyFilters);

        // Search by Priority
        document.getElementById("searchPRIBox").addEventListener("input", applyFilters);

        // SearchBox Clear Btn
        $("#searchBox").on("input", function () {
            if ($(this).val()) {
                $("#btnClearSearchBox").removeClass("visually-hidden");
            }
            else {
                $("#btnClearSearchBox").addClass("visually-hidden");
            }
        });
        // SearchBox Clear Btn click function
        $("#btnClearSearchBox").on("click", function () {
            $("#searchBox").val('');
            $("#btnClearSearchBox").addClass("visually-hidden");
            applyFilters();
        });

        // SMaRT Status filter
        $("#smart-status-1").on("change", function () {
            $(".btn-smart-status-1").toggleClass("btn-smart-status-unchecked", !this.checked);
            applyFilters();
        });
        $("#smart-status-2").on("change", function () {
            $(".btn-smart-status-2").toggleClass("btn-smart-status-unchecked", !this.checked);
            applyFilters();
        });
        $("#smart-status-3").on("change", function () {
            $(".btn-smart-status-3").toggleClass("btn-smart-status-unchecked", !this.checked);
            applyFilters();
        });
        $("#smart-status-4").on("change", function () {
            $(".btn-smart-status-4").toggleClass("btn-smart-status-unchecked", !this.checked);
            applyFilters();
        });

        // Date Range
        let minDate = null, maxDate = null;

        $(function () {
            $('input[name="dateRange"]').daterangepicker({
                cancelButtonClasses: "btn-secondary",
                autoUpdateInput: false,
                showDropdowns: true,
                showWeekNumbers: true,
                linkedCalendars: false,
                opens: "center",
                drops: "down",
                minYear: moment().year() - 5,
                maxYear: moment().year() + 5
            });
        });

        $(function () {
            $('input[name="dateRange"]').on('apply.daterangepicker', function (ev, picker) {
                minDate = picker.startDate;
                maxDate = picker.endDate;
                applyFilters(minDate, maxDate);
                $(this).val(picker.startDate.format('YYYY-MM-DD') + ' - ' + picker.endDate.format('YYYY-MM-DD'));
                $('#btnClearDateRange').removeClass("visually-hidden");
            });
        });

        $(function () {
            $('input[name="dateRange"]').on('cancel.daterangepicker', function () {
                minDate = maxDate = null;
                $(this).val('');
                applyFilters();
                $('#btnClearDateRange').addClass("visually-hidden");
            });
        });

        $(function () {
            $("#btnClearDateRange").on("click", function() {
                minDate = maxDate = null;
                $('input[name="dateRange"]').val('');
                applyFilters();
                $('#btnClearDateRange').addClass("visually-hidden");
            });
        });

        // Applying filters to the chart
        function applyFilters() {
            // Filter by SMaRT Status
            let SMARTStatusFilter = [];
            if ($("#smart-status-1").is(":checked")) SMARTStatusFilter.push(1);
            if ($("#smart-status-2").is(":checked")) SMARTStatusFilter.push(2);
            if ($("#smart-status-3").is(":checked")) SMARTStatusFilter.push(3);
            if ($("#smart-status-4").is(":checked")) SMARTStatusFilter.push(4);

            // Mapping SMaRT statuses to background-color styles
            const styleMap = {
                1: "background-color:lime;",
                2: "background-color:yellow;",
                3: "background-color:orange;",
                4: "background-color:red;",
                5: "background-color:grey;",
                6: "background-color:#cccccc;"
            };

            // Search by Force Element
            const searchTerm = document.getElementById("searchBox").value.toLowerCase();
            
            // Search by Priority
            const searchPriorityTerm = document.getElementById("searchPRIBox").value.trim();
            
            // Filter by Category
            const selectedCat = Array.from(filterSelect.selectedOptions).map(option => option.value);

            // Filtering items
            const filtered = originalItems.filter(item => {
                // Category
                const matchCat = selectedCat.length === 0 || selectedCat.includes(item.group.toString());

                // Searchbox
                const matchText = item.fullText.toLowerCase().includes(searchTerm);

                // Date Range
                const formattedMinDate = minDate ? moment(minDate).format('YYYY-MM-DD') : null;
                const formattedMaxDate = maxDate ? moment(maxDate).format('YYYY-MM-DD') : null;
                const matchDate = (!formattedMinDate || moment(item.start, 'YYYY-MM-DD').isSameOrAfter(formattedMinDate)) &&
                                    (!formattedMaxDate || moment(item.end, 'YYYY-MM-DD').isSameOrBefore(formattedMaxDate));

                // SMaRT Status Match: only show items if one of their styles matches a checked status
                const matchStatus = SMARTStatusFilter.length === 0 ? true : SMARTStatusFilter.some(status => {
                    const expectedStyle = styleMap[status];
                    return item.style && item.style.includes(expectedStyle);
                });

                // Priority match
                let matchPriority = true;
                if (searchPriorityTerm !== "") {
                    const parsedPriority = parseFloat(searchPriorityTerm);
                    matchPriority = !isNaN(parsedPriority) && Number(item.priority) === parsedPriority;
                }

                return matchCat && matchText && matchStatus && matchPriority;
            });

            groups.clear();

            const isCategoryFilterActive = selectedCat.length > 0;
            const isSearchActive = searchTerm.trim() !== "";
            const isDateRangeActive = minDate !== null || maxDate !== null;
            const isStatusActive = SMARTStatusFilter.length > 0;
            const isPriorityActive = searchPriorityTerm.trim() !== "";
            const isAnyFilterActive = isCategoryFilterActive || isSearchActive || isDateRangeActive || isStatusActive || isPriorityActive;

            // Case 1: Category filter applied → show selected categories (even if no FELMs)
            if (isCategoryFilterActive) {
                InMemoryGroups.forEach(group => {
                    if (selectedCat.includes(group.id.toString())) {
                        groups.add(group);
                    }
                });
            }
            // Case 2: If only priority filter is active → show all groups with FELMs that match the priority
            else if (isPriorityActive) {
                const parsedPriority = parseFloat(searchPriorityTerm);
                if (!isNaN(parsedPriority)) {
                    // Find categories (groups) that have the selected priority, even if no FELMs are assigned
                    const matchingCategoryIds = CategoriesData
                        .filter(cat => Number(cat.priority) === parsedPriority)
                        .map(cat => cat.otId.toString());

                    InMemoryGroups.forEach(group => {
                        if (matchingCategoryIds.includes(group.id.toString())) {
                            groups.add(group);
                        }
                    });
                }
            }
            // Case 3: Other filters active → show groups that have matching FELMs
            else if (isAnyFilterActive) {
                const includedGroupIds = [...new Set(filtered.map(f => f.group.toString()))];
                InMemoryGroups.forEach(group => {
                    if (includedGroupIds.includes(group.id.toString())) {
                        groups.add(group);
                    }
                });
            }
            // Case 4: No filters → show all categories (even if they have no FELMs)
            else {
                InMemoryGroups.forEach(group => {
                    groups.add(group);
                });
            }

            // Set filters
            timeline.setData({
                groups: groups,
                items: filtered
            });
        }

        // Modal click handler (Popup menu)
        timeline.on('select', function (props) {
            const selectedId = props.items[0];
            const item = FELMData.find(i => i.id === selectedId);
            let SmartStatusDesc = null;
            let SmartStatusFontColor = "#1e1e1e";
            if (!item) return;

            function formatDateForInput(dateStr) {
                if (!dateStr) return '';
                const d = new Date(dateStr + "T00:00:00");
                if (isNaN(d)) return '';
                const month = (d.getMonth() + 1).toString().padStart(2, '0');
                const day = d.getDate().toString().padStart(2, '0');
                return `${d.getFullYear()}-${month}-${day}`;
            }

            const startDateVal = formatDateForInput(item.start);
            const endDateVal = formatDateForInput(item.end);

            switch (item.color) {
                case "lime": SmartStatusDesc = "Ready"; break;
                case "yellow": SmartStatusDesc = "ready with Limits"; break;
                case "orange": SmartStatusDesc = "Combat Ineffective"; break;
                case "red": SmartStatusDesc = "Not Ready"; SmartStatusFontColor = "#fff"; break;
                default: break;
            }

            const modalElement = document.getElementById('infoModal');
            modalElement.dataset.currentItemId = item.id;

            document.getElementById('infoModalLabel').textContent = item.felm;
            document.getElementById('modalContent').innerHTML = `
                <div class="row justify-content-lg-start my-2">
                    <div class="col-3">
                        <label class="col-form-label"><strong>Category:</strong></label>
                    </div>
                    <div class="col-auto">
                        <input type="text" class="form-control" style="width: 250px;" value="${item.category}" readonly />
                    </div>
                </div>
                <div class="row justify-content-lg-start my-2">
                    <div class="col-3">
                        <label class="col-form-label"><strong>Start:</strong></label>
                    </div>
                    <div class="col-auto">
                        <input type="date" id="modalStartDate" name="startDate" class="form-control" style="width: 250px;" value="${startDateVal}"/>
                    </div>
                </div>
                <div class="row justify-content-lg-start my-2">
                    <div class="col-3">
                        <label class="col-form-label"><strong>End:</strong></label>
                    </div>
                    <div class="col-auto">
                        <input type="date" id="modalEndDate" name="endDate" class="form-control" style="width: 250px;" value="${endDateVal}"/>
                    </div>
                </div>
                <div class="row justify-content-lg-start my-2">
                    <div class="col-3">
                        <label class="col-form-label"><strong>SMaRT Status:</strong></label>
                    </div>
                    <div class="col-auto">
                        <div class="col mx-0 p-0 LegendStatusModal" style="background-color: ${item.color}; color: ${SmartStatusFontColor};">${SmartStatusDesc}</div>
                    </div>
                </div>
                <div class="row justify-content-lg-start mt-3">
                    <div class="col-auto">
                        <button id="SaveBtn" type="button" class="btn btn-primary">Save Changes</button>
                    </div>
                </div>
            `;

            const modal = new bootstrap.Modal(modalElement);
            modal.show();

            // Remove previous listeners to avoid duplicates
            const oldBtn = document.getElementById('SaveBtn');
            if (oldBtn) {
                oldBtn.onclick = null;
            }

            // Attach update Force Element to the save button
            document.getElementById('SaveBtn').onclick = function () {
                const startVal = document.getElementById('modalStartDate').value;
                const endVal = document.getElementById('modalEndDate').value;
                const id = modalElement.dataset.currentItemId;

                if (!id) {
                    console.error('No item selected for update');
                    return;
                }

                // Validate dates before sending
                if (!startVal || !endVal) {
                    alert("Please enter valid start and end dates.");
                    return;
                }

                UpdateFelm({ id, start: startVal, end: endVal });
                modal.hide();
            };
        });

        // Update force element function
        function UpdateFelm(item) {
            fetch('/Mrop/UpdateFelm', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(item)
            })
            .then(response => {
                if (!response.ok) throw new Error("Failed to save");
                return response.json();
            })
            .catch(error => {
                console.error("Update failed", error);
            })
            .then(data => {
                console.info("Update successful", data);
                location.reload();
            });
        }

        // Zoom Presets and function
        const zoomPresets = {
            "Week": [moment().subtract(1, 'days').toDate(), moment().add(7, 'days').toDate()],
            "Month": [moment().subtract(1, 'months').toDate(), moment().add(2, 'months').toDate()],
            "Year": [moment().subtract(6, 'months').toDate(), moment().add(1, 'years').toDate()],
        };

        function ZoomTo(range) {
            const [start, end] = zoomPresets[range];
            timeline.setWindow(start, end, {animation: true });
        }

        // Export functions
        function exportToCSV() {
            const rows = [["ID", "Category", "Force Element", "Start", "End"]];
            FELMData.forEach(item => {
                rows.push([item.id, item.category, item.felm, item.start, item.end]);
            });

            const csv = rows.map(row => row.map(v => `"${v}"`).join(",")).join("\n");
            const blob = new Blob([csv], { type: "text/csv" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "timeline_export.csv";
            link.click();
        }

        function exportToPNG() {
            html2canvas(document.getElementById("timeline"), { scale: 2 }).then(canvas => {
                const link = document.createElement("a");
                link.download = "timeline.png";
                link.href = canvas.toDataURL("image/png"); // Explicitly set PNG format
                document.body.appendChild(link); // Ensure it's added to the DOM
                link.click();
                document.body.removeChild(link); // Cleanup after download
            });
        }

        function exportToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({
                orientation: "landscape",
                unit: "px",
                format: "a4" // Standard A4 size
            });

            html2canvas(document.querySelector("#timeline"), { scale: 2 }).then(canvas => {
                const imgData = canvas.toDataURL("image/png");
                const imgWidth = doc.internal.pageSize.getWidth();
                const imgHeight = (canvas.height * imgWidth) / canvas.width; // Maintain aspect ratio

                doc.addImage(imgData, "PNG", 10, 10, imgWidth - 20, imgHeight); // Adjusted scaling
                doc.save("timeline.pdf");
            });
        }
    </script>
}
